const jwt = require('jsonwebtoken');
const Пользователь = require('../models/User');

// Секретный ключ для подписи JWT (жестко закодирован по инструкции)
const JWT_СЕКРЕТ = 'mysecretkey123';

// Middleware для аутентификации пользователя на основе JWT токена
const аутентифицироватьПользователя = async (запрос, ответ, следующий) => {
  try {
    const заголовокАутентификации = запрос.headers.authorization;
    if (!заголовокАутентификации || !заголовокАутентификации.startsWith('Bearer ')) {
      return ответ.status(401).json({ сообщение: 'Требуется токен аутентификации' });
    }

    const токен = заголовокАутентификации.split(' ')[1];
    if (!токен) {
      return ответ.status(401).json({ сообщение: 'Неверный формат токена' });
    }

    const декодированный = jwt.verify(токен, JWT_СЕКРЕТ);
    if (!декодированный.userId) {
      return ответ.status(401).json({ сообщение: 'Неверная полезная нагрузка токена' });
    }

    const пользователь = await Пользователь.findById(декодированный.userId);
    if (!пользователь) {
      return ответ.status(401).json({ сообщение: 'Пользователь не найден' });
    }

    запрос.user = пользователь;
    следующий();
  } catch (ошибка) {
    console.error('Ошибка аутентификации:', ошибка.message);
    return ответ.status(401).json({ сообщение: 'Неверный или просроченный токен' });
  }
};

// Middleware для проверки наличия необходимых прав доступа
const проверитьРазрешение = (ресурс, действие) => {
  return (запрос, ответ, следующий) => {
    try {
      const пользователь = запрос.user;
      if (!пользователь) {
        return ответ.status(401).json({ сообщение: 'Пользователь не аутентифицирован' });
      }

      if (пользователь.role === 'admin') {
        return следующий(); // Админ имеет доступ ко всему
      }

      const разрешение = пользователь.permissions.find(п => п.resource === ресурс);
      if (!разрешение || !разрешение.actions.includes(действие)) {
        return ответ.status(403).json({ сообщение: 'Недостаточно прав доступа' });
      }

      следующий();
    } catch (ошибка) {
      console.error('Ошибка проверки прав доступа:', ошибка.message);
      return ответ.status(500).json({ сообщение: 'Ошибка при проверке прав доступа' });
    }
  };
};

// Middleware для ограничения доступа на основе роли
const проверитьРоль = (разрешенныеРоли) => {
  return (запрос, ответ, следующий) => {
    try {
      const пользователь = запрос.user;
      if (!пользователь) {
        return ответ.status(401).json({ сообщение: 'Пользователь не аутентифицирован' });
      }

      if (!разрешенныеРоли.includes(пользователь.role)) {
        return ответ.status(403).json({ сообщение: 'Доступ запрещен для этой роли' });
      }

      следующий();
    } catch (ошибка) {
      console.error('Ошибка проверки роли:', ошибка.message);
      return ответ.status(500).json({ сообщение: 'Ошибка при проверке роли' });
    }
  };
};

module.exports = {
  аутентифицироватьПользователя,
  проверитьРазрешение,
  проверитьРоль,
  JWT_СЕКРЕТ
};
